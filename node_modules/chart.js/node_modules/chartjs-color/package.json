{
  "name": "chartjs-color",
  "version": "2.0.0",
  "description": "Color conversion and manipulation with CSS string support",
  "keywords": [
    "color",
    "colour",
    "css"
  ],
  "authors": [
    "Heather Arthur <fayearthur@gmail.com>",
    "Maxime Thirouin",
    "Josh Junon"
  ],
  "license": "MIT",
  "repository": {
    "type": "git",
    "url": "git://github.com/chartjs/chartjs-color"
  },
  "xo": {
    "envs": [
      "browser",
      "node"
    ],
    "rules": {
      "one-var": [
        2,
        {
          "initialized": "never"
        }
      ],
      "linebreak-style": 0,
      "no-cond-assign": 0,
      "new-cap": 0
    }
  },
  "files": [
    "CHANGELOG.md",
    "LICENSE",
    "index.js"
  ],
  "scripts": {
    "build": "gulp build",
    "pretest": "xo",
    "test": "mocha"
  },
  "dependencies": {
    "color-convert": "^0.5.3",
    "chartjs-color-string": "^0.4.0"
  },
  "devDependencies": {
    "browserify": "^10.1.3",
    "gulp": "^3.8.11",
    "gulp-rename": "^1.2.2",
    "gulp-uglify": "^1.2.0",
    "gulp-streamify": "^1.0.2",
    "mocha": "^2.2.5",
    "vinyl-source-stream": "^1.1.0",
    "xo": "^0.12.1"
  },
  "readme": "# color [![Build Status](https://travis-ci.org/chartjs/chartjs-color.svg?branch=master)](https://travis-ci.org/chartjs/chartjs-color)\r\n\r\n> JavaScript library for color conversion and manipulation with support for CSS color strings.\r\n\r\n```js\r\nvar color = Color(\"#7743CE\");\r\n\r\ncolor.alpha(0.5).lighten(0.5);\r\n\r\nconsole.log(color.hslString());  // \"hsla(262, 59%, 81%, 0.5)\"\r\n```\r\n\r\n## Install\r\n\r\n```console\r\n$ npm install color\r\n```\r\n\r\n## Usage\r\n\r\n```js\r\nvar Color = require(\"color\")\r\n```\r\n\r\n### Setters\r\n\r\n```js\r\nvar color = Color(\"rgb(255, 255, 255)\")\r\nvar color = Color({r: 255, g: 255, b: 255})\r\nvar color = Color().rgb(255, 255, 255)\r\nvar color = Color().rgb([255, 255, 255])\r\n```\r\nPass any valid CSS color string into `Color()` or a hash of values. Also load in color values with `rgb()`, `hsl()`, `hsv()`, `hwb()`, and `cmyk()`.\r\n\r\n```js\r\ncolor.red(120)\r\n```\r\nSet the values for individual channels with `alpha`, `red`, `green`, `blue`, `hue`, `saturation` (hsl), `saturationv` (hsv), `lightness`, `whiteness`, `blackness`, `cyan`, `magenta`, `yellow`, `black`\r\n\r\n### Getters\r\n\r\n\r\n```js\r\ncolor.rgb()       // {r: 255, g: 255, b: 255}\r\n```\r\nGet a hash of the rgb values with `rgb()`, similarly for `hsl()`, `hsv()`, and `cmyk()`\r\n\r\n```js\r\ncolor.rgbArray()  // [255, 255, 255]\r\n```\r\nGet an array of the values with `rgbArray()`, `hslArray()`, `hsvArray()`, and `cmykArray()`.\r\n\r\n```js\r\ncolor.red()       // 255\r\n```\r\nGet the value for an individual channel.\r\n\r\n### CSS Strings\r\n\r\n```js\r\ncolor.hslString()  // \"hsl(320, 50%, 100%)\"\r\n```\r\n\r\nDifferent CSS String formats for the color are on `hexString`, `rgbString`, `percentString`, `hslString`, `hwbString`, and `keyword` (undefined if it's not a keyword color). `\"rgba\"` and `\"hsla\"` are used if the current alpha value of the color isn't `1`.\r\n\r\n### Luminosity\r\n\r\n```js\r\ncolor.luminosity();  // 0.412\r\n```\r\nThe [WCAG luminosity](http://www.w3.org/TR/WCAG20/#relativeluminancedef) of the color. 0 is black, 1 is white.\r\n\r\n```js\r\ncolor.contrast(Color(\"blue\"))  // 12\r\n```\r\nThe [WCAG contrast ratio](http://www.w3.org/TR/WCAG20/#contrast-ratiodef) to another color, from 1 (same color) to 21 (contrast b/w white and black).\r\n\r\n```js\r\ncolor.light();  // true\r\ncolor.dark();   // false\r\n```\r\nGet whether the color is \"light\" or \"dark\", useful for deciding text color.\r\n\r\n### Manipulation\r\n\r\n```js\r\ncolor.negate()         // rgb(0, 100, 255) -> rgb(255, 155, 0)\r\n\r\ncolor.lighten(0.5)     // hsl(100, 50%, 50%) -> hsl(100, 50%, 75%)\r\ncolor.darken(0.5)      // hsl(100, 50%, 50%) -> hsl(100, 50%, 25%)\r\n\r\ncolor.saturate(0.5)    // hsl(100, 50%, 50%) -> hsl(100, 75%, 50%)\r\ncolor.desaturate(0.5)  // hsl(100, 50%, 50%) -> hsl(100, 25%, 50%)\r\ncolor.greyscale()      // #5CBF54 -> #969696\r\n\r\ncolor.whiten(0.5)      // hwb(100, 50%, 50%) -> hwb(100, 75%, 50%)\r\ncolor.blacken(0.5)     // hwb(100, 50%, 50%) -> hwb(100, 50%, 75%)\r\n\r\ncolor.clearer(0.5)     // rgba(10, 10, 10, 0.8) -> rgba(10, 10, 10, 0.4)\r\ncolor.opaquer(0.5)     // rgba(10, 10, 10, 0.8) -> rgba(10, 10, 10, 1.0)\r\n\r\ncolor.rotate(180)      // hsl(60, 20%, 20%) -> hsl(240, 20%, 20%)\r\ncolor.rotate(-90)      // hsl(60, 20%, 20%) -> hsl(330, 20%, 20%)\r\n\r\ncolor.mix(Color(\"yellow\"))        // cyan -> rgb(128, 255, 128)\r\ncolor.mix(Color(\"yellow\"), 0.3)   // cyan -> rgb(77, 255, 179)\r\n\r\n// chaining\r\ncolor.green(100).greyscale().lighten(0.6)\r\n```\r\n\r\n### Clone\r\n\r\nYou can can create a copy of an existing color object using `clone()`:\r\n\r\n```js\r\ncolor.clone() // -> New color object\r\n```\r\n\r\nAnd more to come...\r\n\r\n## Propers\r\n\r\nThe API was inspired by [color-js](https://github.com/brehaut/color-js). Manipulation functions by CSS tools like Sass, LESS, and Stylus.\r\n",
  "readmeFilename": "README.md",
  "bugs": {
    "url": "https://github.com/chartjs/chartjs-color/issues"
  },
  "homepage": "https://github.com/chartjs/chartjs-color",
  "_id": "chartjs-color@2.0.0",
  "_shasum": "7f60c7256589b24914814ece757659117381e35b",
  "_from": "chartjs-color@^2.0.0",
  "_resolved": "https://registry.npmjs.org/chartjs-color/-/chartjs-color-2.0.0.tgz"
}
